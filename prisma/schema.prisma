// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Page {
    id     String  @id @default(cuid())
    code   String  @unique @default(cuid())
    song   Song[]
    player Player[]
}

model Song {
    id         String  @id @default(cuid())
    name       String
    pageId     String
    progressId Int
    stageId    Int
    page       Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
    progress   Progress   @relation(fields: [progressId], references: [id])
    stage      Stage      @relation(fields: [stageId], references: [id])
    songEntry  SongEntry[]
}

model Stage {
    id   Int @id @default(autoincrement())
    name String
    song Song[]
}

model Progress {
    id        Int @id @default(autoincrement())
    name      String
    song      Song[]
    songEntry SongEntry[]
}

model SongEntry {
    id           String      @id @default(cuid())
    name         String
    progressId   Int
    instrumentId Int
    playerId     String?
    songId       String
    song         Song        @relation(fields: [songId], references: [id], onDelete: Cascade)
    progress     Progress    @relation(fields: [progressId], references: [id])
    instrument   Instrument  @relation(fields: [instrumentId], references: [id])
    player       Player?     @relation(fields: [playerId], references: [id])
}

model Instrument {
    id        Int @id @default(autoincrement())
    name      String
    songEntry SongEntry[]
    player    Player[]
}

model Player {
    id                       String @id @default(cuid())
    name                     String
    pageId                   String
    instrumentId             Int
    default                  Boolean
    page         Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
    instrument   Instrument  @relation(fields: [instrumentId], references: [id])
    songEntry    SongEntry[]
}


// Next auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
